const menuToggle = document.getElementById("menuToggle");
const closeMenu = document.getElementById("closeMenu");
const menu = document.getElementById("menu");

if (menuToggle && menu && closeMenu) {
  menuToggle.addEventListener("click", () => menu.classList.add("active"));
  closeMenu.addEventListener("click", () => menu.classList.remove("active"));
  document.addEventListener("click", (e) => {
    if (!menu.contains(e.target) && !menuToggle.contains(e.target)) {
      menu.classList.remove("active");
    }
  });
}

const popupOverlay = document.getElementById("popupOverlay");
const popupClose = document.getElementById("popupClose");
const openPopupBtn = document.querySelector(".open-popup-btn");

if (popupOverlay && popupClose && openPopupBtn) {
  openPopupBtn.addEventListener(
    "click",
    () => (popupOverlay.style.display = "flex")
  );
  popupClose.addEventListener(
    "click",
    () => (popupOverlay.style.display = "none")
  );
  popupOverlay.addEventListener(
    "click",
    (e) => e.target === popupOverlay && (popupOverlay.style.display = "none")
  );
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && popupOverlay.style.display === "flex") {
      popupOverlay.style.display = "none";
    }
  });
}

document.addEventListener("DOMContentLoaded", () => {
  const slides = document.querySelector(".slides");
  const prevBtn = document.querySelector(".arrow.prev");
  const nextBtn = document.querySelector(".arrow.next");

  if (!slides || !prevBtn || !nextBtn) return;

  const slideElements = document.querySelectorAll(".slide");
  const slideCount = slideElements.length;
  let currentIndex = 0;
  let isDragging = false;
  let startPos = 0;
  let currentTranslate = 0;
  let startTranslate = 0;
  let animationID = 0;

  const slideWidth = slides.clientWidth;

  const showSlide = (index) => {
    index = Math.max(0, Math.min(slideCount - 1, index));
    slides.style.transform = `translateX(-${index * 100}%)`;
    slides.style.transition = "transform 0.4s ease-out";
    currentIndex = index;
    startTranslate = -currentIndex * slideWidth;
    currentTranslate = startTranslate; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–∫–∞—á–∫–æ–≤
  };

  const getPositionX = (event) => {
    let pos;
    if (event.type.includes("mouse")) {
      pos = event.pageX;
    } else if (event.touches && event.touches.length > 0) {
      pos = event.touches[0].clientX;
    } else {
      return 0; // fallback
    }
    return isNaN(pos) ? 0 : pos;
  };

  const animation = () => {
    if (isDragging) {
      setSliderPosition();
      animationID = requestAnimationFrame(animation);
    }
  };

  const setSliderPosition = () => {
    const maxTranslate = 0;
    const minTranslate = -(slideCount - 1) * slideWidth;
    currentTranslate = Math.min(maxTranslate, Math.max(minTranslate, currentTranslate));

    slides.style.transform = `translateX(${currentTranslate}px)`;
    slides.style.transition = "none";
  };

  const touchStart = (e) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ —Ç–∞—â–∏–º
    if (isDragging) return;

    isDragging = true;
    startPos = getPositionX(e);
    const matrix = new DOMMatrix(window.getComputedStyle(slides).transform);
    startTranslate = isNaN(matrix.m41) ? 0 : matrix.m41;
    currentTranslate = startTranslate;

    slides.style.transition = "none";
    slides.style.cursor = "grabbing";
    slides.style.pointerEvents = "none"; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –¥—Ä–∞–≥–∞

    // üëá –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–í–ò–ñ–ï–ù–ò–Ø —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å
    document.addEventListener("mousemove", touchMove);
    document.addEventListener("mouseup", touchEnd);
    document.addEventListener("touchmove", touchMove, { passive: false });
    document.addEventListener("touchend", touchEnd);

    animationID = requestAnimationFrame(animation);
    e.preventDefault(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –¥—Ä.
  };

  const touchMove = (e) => {
    if (!isDragging) return; // –¥–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞

    const pos = getPositionX(e);
    if (isNaN(pos)) return;

    const delta = pos - startPos;
    if (isNaN(delta)) return;

    currentTranslate = startTranslate + delta;
  };

  const touchEnd = () => {
    if (!isDragging) return; // –¥–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞

    cancelAnimationFrame(animationID);
    isDragging = false;

    // üëá –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.removeEventListener("mousemove", touchMove);
    document.removeEventListener("mouseup", touchEnd);
    document.removeEventListener("touchmove", touchMove);
    document.removeEventListener("touchend", touchEnd);

    slides.style.cursor = "grab";
    slides.style.pointerEvents = "auto";

    const movedBy = currentTranslate - startTranslate;
    const threshold = slideWidth * 0.3;
    let newIndex = currentIndex;

    if (movedBy < -threshold && currentIndex < slideCount - 1) {
      newIndex++;
    } else if (movedBy > threshold && currentIndex > 0) {
      newIndex--;
    }

    if (newIndex !== currentIndex) {
      showSlide(newIndex);
    } else {
      showSlide(currentIndex); // –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –º–µ—Å—Ç–æ
    }
  };

  // üëá –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥—Ä–∞–≥–∞
  slides.addEventListener("mousedown", touchStart);
  slides.addEventListener("touchstart", touchStart);

  // –ö–Ω–æ–ø–∫–∏
  prevBtn.addEventListener("click", (e) => {
    e.preventDefault();
    showSlide(currentIndex - 1);
  });
  nextBtn.addEventListener("click", (e) => {
    e.preventDefault();
    showSlide(currentIndex + 1);
  });

  // –°—Ç–∏–ª–∏
  slides.style.userSelect = "none";
  slides.style.cursor = "grab";

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  showSlide(0);
});